# Generated by Django 5.2.6 on 2025-09-06 03:52

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='스케줄 이름')),
                ('frequency', models.CharField(choices=[('daily', '매일'), ('weekly', '매주'), ('monthly', '매월')], max_length=20, verbose_name='실행 주기')),
                ('hour', models.IntegerField(default=9, help_text='0-23', verbose_name='실행 시간 (시)')),
                ('minute', models.IntegerField(default=0, help_text='0-59', verbose_name='실행 시간 (분)')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '배치 스케줄',
                'verbose_name_plural': '배치 스케줄',
            },
        ),
        migrations.CreateModel(
            name='NotificationSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='알림 이름')),
                ('description', models.TextField(blank=True, verbose_name='알림 설명')),
                ('cron_expression', models.CharField(help_text='예: 0 21 * * * (매일 21시 0분)', max_length=50, verbose_name='Cron 표현식')),
                ('title', models.CharField(max_length=200, verbose_name='알림 제목')),
                ('body', models.TextField(verbose_name='알림 내용')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '알림 스케줄',
                'verbose_name_plural': '알림 스케줄',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_category_code', models.IntegerField()),
                ('main_category_name', models.CharField(max_length=50)),
                ('middle_category_code', models.IntegerField(blank=True, null=True)),
                ('middle_category_name', models.CharField(blank=True, max_length=50, null=True)),
                ('sub_category_code', models.IntegerField(blank=True, null=True)),
                ('sub_category_name', models.CharField(blank=True, max_length=50, null=True)),
                ('detail_category_code', models.IntegerField(blank=True, null=True)),
                ('detail_category_name', models.CharField(blank=True, max_length=50, null=True)),
                ('representative_food_code', models.IntegerField(blank=True, null=True)),
                ('representative_food_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': '음식 분류',
                'verbose_name_plural': '음식 분류들',
                'unique_together': {('main_category_code', 'representative_food_code', 'middle_category_code', 'sub_category_code', 'detail_category_code')},
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_code', models.CharField(help_text='식품 고유 코드', max_length=20, unique=True)),
                ('food_name', models.CharField(help_text='식품명', max_length=100)),
                ('data_type_code', models.CharField(blank=True, help_text='데이터구분코드', max_length=1, null=True)),
                ('data_type_name', models.CharField(blank=True, help_text='데이터구분명', max_length=2, null=True)),
                ('food_origin_code', models.IntegerField(blank=True, help_text='식품기원코드', null=True)),
                ('food_origin_name', models.CharField(blank=True, help_text='식품기원명', max_length=22, null=True)),
                ('nutrition_standard_amount', models.CharField(blank=True, help_text='영양성분함량기준량', max_length=10, null=True)),
                ('nutrition_standard_unit', models.CharField(blank=True, help_text='영양성분함량기준단위', max_length=10, null=True)),
                ('energy_kcal', models.IntegerField(blank=True, help_text='에너지 (kcal)', null=True)),
                ('water_g', models.DecimalField(blank=True, decimal_places=2, help_text='수분 (g)', max_digits=8, null=True)),
                ('protein_g', models.DecimalField(blank=True, decimal_places=2, help_text='단백질 (g)', max_digits=8, null=True)),
                ('fat_g', models.DecimalField(blank=True, decimal_places=2, help_text='지방 (g)', max_digits=8, null=True)),
                ('ash_g', models.DecimalField(blank=True, decimal_places=2, help_text='회분 (g)', max_digits=8, null=True)),
                ('carbohydrates_g', models.DecimalField(blank=True, decimal_places=2, help_text='탄수화물 (g)', max_digits=8, null=True)),
                ('sugar_g', models.DecimalField(blank=True, decimal_places=2, help_text='당류 (g)', max_digits=8, null=True)),
                ('dietary_fiber_g', models.DecimalField(blank=True, decimal_places=2, help_text='식이섬유 (g)', max_digits=8, null=True)),
                ('calcium_mg', models.DecimalField(blank=True, decimal_places=2, help_text='칼슘 (mg)', max_digits=8, null=True)),
                ('iron_mg', models.DecimalField(blank=True, decimal_places=2, help_text='철 (mg)', max_digits=8, null=True)),
                ('phosphorus_mg', models.DecimalField(blank=True, decimal_places=2, help_text='인 (mg)', max_digits=8, null=True)),
                ('potassium_mg', models.DecimalField(blank=True, decimal_places=2, help_text='칼륨 (mg)', max_digits=8, null=True)),
                ('sodium_mg', models.DecimalField(blank=True, decimal_places=2, help_text='나트륨 (mg)', max_digits=8, null=True)),
                ('copper_ug', models.DecimalField(blank=True, decimal_places=2, help_text='구리 (μg)', max_digits=8, null=True)),
                ('magnesium_mg', models.DecimalField(blank=True, decimal_places=2, help_text='마그네슘 (mg)', max_digits=8, null=True)),
                ('manganese_mg', models.DecimalField(blank=True, decimal_places=2, help_text='망간 (mg)', max_digits=8, null=True)),
                ('molybdenum_ug', models.TextField(blank=True, help_text='몰리브덴 (μg)', null=True)),
                ('fluorine_mg', models.TextField(blank=True, help_text='불소 (mg)', null=True)),
                ('selenium_ug', models.DecimalField(blank=True, decimal_places=2, help_text='셀레늄 (μg)', max_digits=8, null=True)),
                ('zinc_mg', models.DecimalField(blank=True, decimal_places=2, help_text='아연 (mg)', max_digits=8, null=True)),
                ('chlorine_mg', models.TextField(blank=True, help_text='염소 (mg)', null=True)),
                ('iodine_ug', models.TextField(blank=True, help_text='요오드 (μg)', null=True)),
                ('chromium_ug', models.TextField(blank=True, help_text='크롬 (μg)', null=True)),
                ('vitamin_a_rae_ug', models.DecimalField(blank=True, decimal_places=2, help_text='비타민 A (μg RAE)', max_digits=8, null=True)),
                ('retinol_ug', models.DecimalField(blank=True, decimal_places=2, help_text='레티놀 (μg)', max_digits=8, null=True)),
                ('beta_carotene_ug', models.DecimalField(blank=True, decimal_places=2, help_text='베타카로틴 (μg)', max_digits=8, null=True)),
                ('thiamine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='티아민 (mg)', max_digits=8, null=True)),
                ('riboflavin_mg', models.DecimalField(blank=True, decimal_places=2, help_text='리보플라빈 (mg)', max_digits=8, null=True)),
                ('niacin_mg', models.DecimalField(blank=True, decimal_places=2, help_text='니아신 (mg)', max_digits=8, null=True)),
                ('nicotinic_acid_mg', models.TextField(blank=True, help_text='니코틴산 (mg)', null=True)),
                ('nicotinamide_mg', models.TextField(blank=True, help_text='니코틴아마이드 (mg)', null=True)),
                ('biotin_ug', models.TextField(blank=True, help_text='비오틴 / 바이오틴 (μg)', null=True)),
                ('vitamin_b6_mg', models.TextField(blank=True, help_text='비타민 B6 (mg)', null=True)),
                ('vitamin_b12_ug', models.CharField(blank=True, help_text='비타민 B12 (μg)', max_length=5, null=True)),
                ('folate_dfe_ug', models.DecimalField(blank=True, decimal_places=2, help_text='엽산 (μg DFE)', max_digits=8, null=True)),
                ('choline_mg', models.TextField(blank=True, help_text='콜린 (mg)', null=True)),
                ('pantothenic_acid_mg', models.TextField(blank=True, help_text='판토텐산 (mg)', null=True)),
                ('vitamin_d_ug', models.DecimalField(blank=True, decimal_places=2, help_text='비타민 D (μg)', max_digits=8, null=True)),
                ('vitamin_d2_ug', models.TextField(blank=True, help_text='비타민 D2 (μg)', null=True)),
                ('vitamin_d3_ug', models.TextField(blank=True, help_text='비타민 D3 (μg)', null=True)),
                ('vitamin_e_ate_mg', models.DecimalField(blank=True, decimal_places=2, help_text='비타민 E (mg α-TE)', max_digits=8, null=True)),
                ('alpha_tocopherol_mg', models.TextField(blank=True, help_text='알파 토코페롤 (mg)', null=True)),
                ('beta_tocopherol_mg', models.TextField(blank=True, help_text='베타 토코페롤 (mg)', null=True)),
                ('gamma_tocopherol_mg', models.TextField(blank=True, help_text='감마 토코페롤 (mg)', null=True)),
                ('delta_tocopherol_mg', models.TextField(blank=True, help_text='델타 토코페롤 (mg)', null=True)),
                ('alpha_tocotrienol_mg', models.TextField(blank=True, help_text='알파 토코트리에놀 (mg)', null=True)),
                ('beta_tocotrienol_mg', models.TextField(blank=True, help_text='베타 토코트리에놀 (mg)', null=True)),
                ('gamma_tocotrienol_mg', models.TextField(blank=True, help_text='감마 토코트리에놀 (mg)', null=True)),
                ('delta_tocotrienol_mg', models.TextField(blank=True, help_text='델타 토코트리에놀 (mg)', null=True)),
                ('vitamin_k_ug', models.TextField(blank=True, help_text='비타민 K (μg)', null=True)),
                ('vitamin_k1_ug', models.TextField(blank=True, help_text='비타민 K1 (μg)', null=True)),
                ('vitamin_k2_ug', models.TextField(blank=True, help_text='비타민 K2 (μg)', null=True)),
                ('vitamin_c_mg', models.DecimalField(blank=True, decimal_places=2, help_text='비타민 C (mg)', max_digits=8, null=True)),
                ('cholesterol_mg', models.DecimalField(blank=True, decimal_places=2, help_text='콜레스테롤 (mg)', max_digits=8, null=True)),
                ('saturated_fatty_acids_g', models.DecimalField(blank=True, decimal_places=2, help_text='포화지방산 (g)', max_digits=8, null=True)),
                ('trans_fatty_acids_g', models.DecimalField(blank=True, decimal_places=2, help_text='트랜스지방산 (g)', max_digits=8, null=True)),
                ('unsaturated_fat_g', models.TextField(blank=True, help_text='불포화지방 (g)', null=True)),
                ('galactose_g', models.TextField(blank=True, help_text='갈락토오스 (g)', null=True)),
                ('fructose_g', models.DecimalField(blank=True, decimal_places=2, help_text='과당 (g)', max_digits=8, null=True)),
                ('sugar_alcohol_g', models.TextField(blank=True, help_text='당알콜 (g)', null=True)),
                ('maltose_g', models.DecimalField(blank=True, decimal_places=2, help_text='맥아당 (g)', max_digits=8, null=True)),
                ('allulose_g', models.TextField(blank=True, help_text='알룰로오스 (g)', null=True)),
                ('erythritol_g', models.TextField(blank=True, help_text='에리스리톨 (g)', null=True)),
                ('lactose_g', models.DecimalField(blank=True, decimal_places=2, help_text='유당 (g)', max_digits=8, null=True)),
                ('sucrose_g', models.DecimalField(blank=True, decimal_places=2, help_text='자당 (g)', max_digits=8, null=True)),
                ('tagatose_g', models.TextField(blank=True, help_text='타가토스 (g)', null=True)),
                ('glucose_g', models.DecimalField(blank=True, decimal_places=2, help_text='포도당 (g)', max_digits=8, null=True)),
                ('epa_dha_mg', models.TextField(blank=True, help_text='EPA + DHA (mg)', null=True)),
                ('gadoleic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='가돌레산 (20:1 n-11) / 에이코센산 (20:1 n-9) (mg)', max_digits=8, null=True)),
                ('gamma_linolenic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='감마 리놀렌산 (18:3 n-6) (mg)', max_digits=8, null=True)),
                ('nervonic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='네르본산 (24:1) (mg)', max_digits=8, null=True)),
                ('docosadienoic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='도코사디에노산 (22:2) (mg)', max_digits=8, null=True)),
                ('docosapentaenoic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='도코사펜타에노산 (DPA, 22:5 n-3) (mg)', max_digits=8, null=True)),
                ('docosahexaenoic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='도코사헥사에노산 (DHA, 22:6 n-3) (mg)', max_digits=8, null=True)),
                ('dihomo_linolenic_acid_mg', models.TextField(blank=True, help_text='디호모리놀렌산 (20:3 n-3) (mg)', null=True)),
                ('lauric_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='라우르산 (12:0) (mg)', max_digits=8, null=True)),
                ('lignoceric_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='리그노세르산 (24:0) (mg)', max_digits=8, null=True)),
                ('linoleic_acid_g', models.DecimalField(blank=True, decimal_places=2, help_text='리놀레산 (18:2 n-6) (g)', max_digits=8, null=True)),
                ('myristoleic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='미리스톨레산 (14:1) (mg)', max_digits=8, null=True)),
                ('myristic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='미리스트산 (14:0) (mg)', max_digits=8, null=True)),
                ('vaccenic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='박센산 (18:1 n-7) (mg)', max_digits=8, null=True)),
                ('behenic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='베헨산 (22:0) (mg)', max_digits=8, null=True)),
                ('butyric_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='부티르산 (4:0) (mg)', max_digits=8, null=True)),
                ('stearic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='스테아르산 (18:0) (mg)', max_digits=8, null=True)),
                ('stearidonic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='스테아리돈산 (18:4 n-3) (mg)', max_digits=8, null=True)),
                ('arachidonic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='아라키돈산 (20:4 n-6) (mg)', max_digits=8, null=True)),
                ('arachidic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='아라키드산 (20:0) (mg)', max_digits=8, null=True)),
                ('alpha_linolenic_acid_g', models.DecimalField(blank=True, decimal_places=2, help_text='알파리놀렌산 (18:3 n-3) (g)', max_digits=8, null=True)),
                ('erucic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='에루크산 (22:1) (mg)', max_digits=8, null=True)),
                ('eicosadienoic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='에이코사디에노산 (20:2 n-6) (mg)', max_digits=8, null=True)),
                ('eicosatrienoic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='에이코사트리에노산 (20:3 n-6) (mg)', max_digits=8, null=True)),
                ('eicosapentaenoic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='에이코사펜타에노산 (EPA, 20:5 n-3) (mg)', max_digits=8, null=True)),
                ('omega3_fatty_acids_g', models.DecimalField(blank=True, decimal_places=2, help_text='오메가3 지방산 (g)', max_digits=8, null=True)),
                ('omega6_fatty_acids_g', models.DecimalField(blank=True, decimal_places=2, help_text='오메가6 지방산 (g)', max_digits=8, null=True)),
                ('oleic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='올레산 (18:1 n-9) (mg)', max_digits=8, null=True)),
                ('caproic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='카프로산 (6:0) (mg)', max_digits=8, null=True)),
                ('capric_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='카프르산 (10:0) (mg)', max_digits=8, null=True)),
                ('caprylic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='카프릴산 (8:0) (mg)', max_digits=8, null=True)),
                ('tridecanoic_acid_mg', models.TextField(blank=True, help_text='트라이데칸산 (13:0) (mg)', null=True)),
                ('trans_linoleic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='트랜스 리놀레산 (18:2t) (mg)', max_digits=8, null=True)),
                ('trans_linolenic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='트랜스 리놀렌산 (18:3t) (mg)', max_digits=8, null=True)),
                ('trans_oleic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='트랜스 올레산 (18:1 trans n-9) (mg)', max_digits=8, null=True)),
                ('tricosanoic_acid_mg', models.TextField(blank=True, help_text='트리코산산 (23:0) (mg)', null=True)),
                ('palmitoleic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='팔미톨레산 (16:1) (mg)', max_digits=8, null=True)),
                ('palmitic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='팔미트산 (16:0) (mg)', max_digits=8, null=True)),
                ('pentadecanoic_acid_mg', models.TextField(blank=True, help_text='펜타데칸산 (15:0) (mg)', null=True)),
                ('heneicosanoic_acid_mg', models.TextField(blank=True, help_text='헨에이코산산 (21:0) (mg)', null=True)),
                ('heptadecenoic_acid_mg', models.TextField(blank=True, help_text='헵타데센산 (17:1) (mg)', null=True)),
                ('heptadecanoic_acid_mg', models.TextField(blank=True, help_text='헵타데칸산 (17:0) (mg)', null=True)),
                ('amino_acids_mg', models.CharField(blank=True, help_text='아미노산 (mg)', max_length=8, null=True)),
                ('essential_amino_acids_mg', models.TextField(blank=True, help_text='필수아미노산 (mg)', null=True)),
                ('non_essential_amino_acids_mg', models.TextField(blank=True, help_text='비필수아미노산 (mg)', null=True)),
                ('glutamic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='글루탐산 (mg)', max_digits=8, null=True)),
                ('glycine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='글리신 (mg)', max_digits=8, null=True)),
                ('lysine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='라이신 (mg)', max_digits=8, null=True)),
                ('leucine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='류신 / 루신 (mg)', max_digits=8, null=True)),
                ('methionine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='메티오닌 (mg)', max_digits=8, null=True)),
                ('valine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='발린 (mg)', max_digits=8, null=True)),
                ('serine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='세린 (mg)', max_digits=8, null=True)),
                ('cysteine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='시스테인 (mg)', max_digits=8, null=True)),
                ('arginine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='아르기닌 (mg)', max_digits=8, null=True)),
                ('aspartic_acid_mg', models.DecimalField(blank=True, decimal_places=2, help_text='아스파르트산 (mg)', max_digits=8, null=True)),
                ('alanine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='알라닌 (mg)', max_digits=8, null=True)),
                ('isoleucine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='이소류신 / 이소루신 (mg)', max_digits=8, null=True)),
                ('taurine_mg', models.TextField(blank=True, help_text='타우린 (mg)', null=True)),
                ('threonine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='트레오닌 (mg)', max_digits=8, null=True)),
                ('tryptophan_mg', models.TextField(blank=True, help_text='트립토판 (mg)', null=True)),
                ('tyrosine_mg', models.CharField(blank=True, help_text='티로신 (mg)', max_length=7, null=True)),
                ('phenylalanine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='페닐알라닌 (mg)', max_digits=8, null=True)),
                ('proline_mg', models.DecimalField(blank=True, decimal_places=2, help_text='프롤린 (mg)', max_digits=8, null=True)),
                ('histidine_mg', models.DecimalField(blank=True, decimal_places=2, help_text='히스티딘 (mg)', max_digits=8, null=True)),
                ('caffeine_mg', models.CharField(blank=True, help_text='카페인 (mg)', max_length=6, null=True)),
                ('tocopherol_mg', models.DecimalField(blank=True, decimal_places=2, help_text='토코페롤 (mg)', max_digits=8, null=True)),
                ('tocotrienol_mg', models.DecimalField(blank=True, decimal_places=2, help_text='토코트리에놀 (mg)', max_digits=8, null=True)),
                ('source_code', models.IntegerField(blank=True, help_text='출처코드', null=True)),
                ('source_name', models.CharField(blank=True, help_text='출처명', max_length=50, null=True)),
                ('food_weight', models.CharField(blank=True, help_text='식품중량', max_length=17, null=True)),
                ('company_name', models.CharField(blank=True, help_text='업체명', max_length=50, null=True)),
                ('data_generation_method_code', models.IntegerField(blank=True, help_text='데이터생성방법코드', null=True)),
                ('data_generation_method_name', models.CharField(blank=True, help_text='데이터생성방법명', max_length=2, null=True)),
                ('data_generation_date', models.DateField(blank=True, help_text='데이터생성일자', null=True)),
                ('data_reference_date', models.DateField(blank=True, help_text='데이터기준일자', null=True)),
                ('dietary_fiber_type', models.CharField(blank=True, help_text='식이섬유종류', max_length=10, null=True)),
                ('dietary_fiber_basis', models.TextField(blank=True, help_text='식이섬유근거', null=True)),
                ('fodmap', models.CharField(blank=True, help_text='포드맵', max_length=50, null=True)),
                ('fodmap_basis', models.TextField(blank=True, help_text='포드맵근거', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foods', to='ibsafe.foodcategory')),
            ],
            options={
                'verbose_name': '음식',
                'verbose_name_plural': '음식들',
                'ordering': ['food_name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='알람 제목')),
                ('body', models.TextField(verbose_name='알람 내용')),
                ('payload', models.CharField(blank=True, max_length=100, null=True, verbose_name='페이로드')),
                ('is_read', models.BooleanField(default=False, verbose_name='읽음 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 시간')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_histories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '알람 이력',
                'verbose_name_plural': '알람 이력들',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserMedication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication_name', models.CharField(help_text='약 이름', max_length=100)),
                ('has_breakfast', models.BooleanField(default=False, help_text='아침 복용 여부')),
                ('has_lunch', models.BooleanField(default=False, help_text='점심 복용 여부')),
                ('has_dinner', models.BooleanField(default=False, help_text='저녁 복용 여부')),
                ('has_as_needed', models.BooleanField(default=False, help_text='필요 시 복용 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '사용자 복용약',
                'verbose_name_plural': '사용자 복용약들',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.URLField(blank=True, max_length=500, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', '남성'), ('female', '여성'), ('other', '기타')], max_length=10, null=True)),
                ('birth_date', models.DateField(blank=True, help_text='생년월일', null=True)),
                ('height', models.IntegerField(blank=True, help_text='키 (cm)', null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=1, help_text='몸무게 (kg)', max_digits=5, null=True)),
                ('step_count', models.IntegerField(default=0, help_text='평소 걸음수')),
                ('sleep_time', models.IntegerField(default=0, help_text='평소 수면시간 (분 단위)')),
                ('water_intake', models.IntegerField(default=0, help_text='평소 물 섭취량 (잔 단위)')),
                ('has_breakfast', models.BooleanField(default=False, help_text='아침 식사 여부')),
                ('has_lunch', models.BooleanField(default=True, help_text='점심 식사 여부')),
                ('has_dinner', models.BooleanField(default=True, help_text='저녁 식사 여부')),
                ('has_gluten_allergy', models.BooleanField(default=False, help_text='글루텐 알러지')),
                ('has_lactose_allergy', models.BooleanField(default=False, help_text='유당 알러지')),
                ('has_nut_allergy', models.BooleanField(default=False, help_text='견과류 알러지')),
                ('has_seafood_allergy', models.BooleanField(default=False, help_text='해산물 알러지')),
                ('has_egg_allergy', models.BooleanField(default=False, help_text='계란 알러지')),
                ('has_soy_allergy', models.BooleanField(default=False, help_text='대두 알러지')),
                ('has_lactose_intolerance', models.BooleanField(default=False, help_text='유당불내증')),
                ('food_preference', models.TextField(blank=True, help_text='음식 선호도 및 특별한 요구사항', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IBSQOLRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_1', models.IntegerField(blank=True, help_text='1번: 장 문제로 인한 무력감', null=True)),
                ('question_2', models.IntegerField(blank=True, help_text='2번: 장 문제로 인한 냄새 때문에 난처함', null=True)),
                ('question_3', models.IntegerField(blank=True, help_text='3번: 변기에 앉아있는 시간 때문에 괴로움', null=True)),
                ('question_4', models.IntegerField(blank=True, help_text='4번: 장 문제로 인한 다른 병에 걸리기 쉬움', null=True)),
                ('question_5', models.IntegerField(blank=True, help_text='5번: 장 문제로 인한 배 팽창감', null=True)),
                ('question_6', models.IntegerField(blank=True, help_text='6번: 장 문제로 인한 생활 조절 불가', null=True)),
                ('question_7', models.IntegerField(blank=True, help_text='7번: 장 문제로 인한 일상생활 즐거움 감소', null=True)),
                ('question_8', models.IntegerField(blank=True, help_text='8번: 장 문제에 대한 이야기 시 불편함', null=True)),
                ('question_9', models.IntegerField(blank=True, help_text='9번: 장 문제로 인한 우울감', null=True)),
                ('question_10', models.IntegerField(blank=True, help_text='10번: 장 문제로 인한 고립감', null=True)),
                ('question_11', models.IntegerField(blank=True, help_text='11번: 장 문제로 인한 음식량 조심', null=True)),
                ('question_12', models.IntegerField(blank=True, help_text='12번: 장 문제로 인한 성생활 어려움', null=True)),
                ('question_13', models.IntegerField(blank=True, help_text='13번: 장 문제를 가지고 있어서 화남', null=True)),
                ('question_14', models.IntegerField(blank=True, help_text='14번: 장 문제로 인한 다른 사람들 성가심', null=True)),
                ('question_15', models.IntegerField(blank=True, help_text='15번: 장 문제 악화에 대한 걱정', null=True)),
                ('question_16', models.IntegerField(blank=True, help_text='16번: 장 문제로 인한 신경 날카로움', null=True)),
                ('question_17', models.IntegerField(blank=True, help_text='17번: 장 문제 과장에 대한 걱정', null=True)),
                ('question_18', models.IntegerField(blank=True, help_text='18번: 장 문제로 인한 할 일 제대로 못함', null=True)),
                ('question_19', models.IntegerField(blank=True, help_text='19번: 장 문제로 인한 스트레스 상황 회피', null=True)),
                ('question_20', models.IntegerField(blank=True, help_text='20번: 장 문제로 인한 성적 욕구 감소', null=True)),
                ('question_21', models.IntegerField(blank=True, help_text='21번: 장 문제로 인한 입을 수 있는 옷 제한', null=True)),
                ('question_22', models.IntegerField(blank=True, help_text='22번: 장 문제로 인한 격렬한 활동 회피', null=True)),
                ('question_23', models.IntegerField(blank=True, help_text='23번: 장 문제로 인한 음식 종류 조심', null=True)),
                ('question_24', models.IntegerField(blank=True, help_text='24번: 장 문제로 인한 모르는 사람들과 어울리기 어려움', null=True)),
                ('question_25', models.IntegerField(blank=True, help_text='25번: 장 문제로 인한 느리고 둔한 느낌', null=True)),
                ('question_26', models.IntegerField(blank=True, help_text='26번: 장 문제로 인한 불결함', null=True)),
                ('question_27', models.IntegerField(blank=True, help_text='27번: 장 문제로 인한 장거리 여행 어려움', null=True)),
                ('question_28', models.IntegerField(blank=True, help_text='28번: 장 문제로 인한 먹고 싶을 때 못 먹는 실망감', null=True)),
                ('question_29', models.IntegerField(blank=True, help_text='29번: 장 문제로 인한 화장실 가까이 있는 것의 중요성', null=True)),
                ('question_30', models.IntegerField(blank=True, help_text='30번: 생활이 장 문제를 중심으로 돌아감', null=True)),
                ('question_31', models.IntegerField(blank=True, help_text='31번: 배변 조절 못하고 참지 못하는 것에 대한 걱정', null=True)),
                ('question_32', models.IntegerField(blank=True, help_text='32번: 대변을 보지 못할까 봐 두려움', null=True)),
                ('question_33', models.IntegerField(blank=True, help_text='33번: 장 문제가 가까운 사람들과의 관계에 영향', null=True)),
                ('question_34', models.IntegerField(blank=True, help_text='34번: 아무도 장 문제를 이해하지 못한다고 느낌', null=True)),
                ('total_score', models.IntegerField(blank=True, help_text='총점 (34-170)', null=True)),
                ('quality_level', models.CharField(blank=True, choices=[('excellent', '매우 좋음'), ('good', '좋음'), ('fair', '보통'), ('poor', '나쁨'), ('very_poor', '매우 나쁨')], help_text='삶의 질 수준', max_length=20, null=True)),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ibsqol_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IBS-QOL 기록',
                'verbose_name_plural': 'IBS-QOL 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='IBSSSSPainRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_date', models.DateField(help_text='통증 기록 날짜')),
                ('has_pain', models.BooleanField(default=False, help_text='해당 날짜에 통증이 있었는지 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ibssss_pain_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IBS-SSS 통증 기록',
                'verbose_name_plural': 'IBS-SSS 통증 기록들',
                'ordering': ['-record_date'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='IBSSSSRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_1', models.BooleanField(blank=True, help_text='1번: 복부 통증 여부', null=True)),
                ('question_2', models.IntegerField(blank=True, help_text='2번: 복부 통증 강도 (0-100)', null=True)),
                ('question_3', models.IntegerField(blank=True, help_text='3번: 복통 일수 (0-10일)', null=True)),
                ('question_4', models.BooleanField(blank=True, help_text='4번: 복부 팽만감 여부', null=True)),
                ('question_5', models.IntegerField(blank=True, help_text='5번: 복부 팽만감 강도 (0-100)', null=True)),
                ('question_6', models.IntegerField(blank=True, help_text='6번: 배변 습관 만족도 (0-100)', null=True)),
                ('question_7', models.IntegerField(blank=True, help_text='7번: 삶의 방해 정도 (0-100)', null=True)),
                ('total_score', models.IntegerField(blank=True, help_text='총점 (0-500)', null=True)),
                ('severity', models.CharField(blank=True, choices=[('normal', '정상'), ('mild', '경증'), ('moderate', '중등도'), ('severe', '중증')], help_text='심각도', max_length=20, null=True)),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ibssss_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IBS-SSS 기록',
                'verbose_name_plural': 'IBS-SSS 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='InterventionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_date', models.DateField(help_text='중재 대상 날짜')),
                ('target_date', models.DateField(help_text='중재 적용 날짜 (대상 날짜 + 1일)')),
                ('diet_evaluation', models.TextField(help_text='식단 평가')),
                ('diet_target', models.JSONField(default=dict, help_text='식단 권고사항 (Target 객체)')),
                ('sleep_evaluation', models.TextField(help_text='수면 평가')),
                ('sleep_target', models.FloatField(help_text='수면 목표 시간 (시간)')),
                ('exercise_evaluation', models.TextField(help_text='운동 평가')),
                ('exercise_target', models.IntegerField(help_text='운동 목표 걸음 수')),
                ('processing_time', models.FloatField(help_text='처리 시간 (초)')),
                ('error_message', models.TextField(blank=True, help_text='오류 메시지 (있는 경우)', null=True)),
                ('input_allergies', models.JSONField(blank=True, default=list, help_text='알레르기 정보', null=True)),
                ('input_restrictions', models.JSONField(blank=True, default=list, help_text='식이 제한사항', null=True)),
                ('input_recent_3days', models.JSONField(blank=True, default=list, help_text='최근 3일간 음식 기록', null=True)),
                ('input_today_sleep', models.FloatField(blank=True, help_text='오늘 수면 시간', null=True)),
                ('input_week_step', models.JSONField(blank=True, default=list, help_text='일주일간 걸음 수', null=True)),
                ('input_today_diet', models.JSONField(blank=True, default=list, help_text='오늘 식단', null=True)),
                ('input_use_rag', models.BooleanField(blank=True, default=True, help_text='RAG 사용 여부', null=True)),
                ('input_ollama_model', models.CharField(blank=True, default='gpt-oss:20b', help_text='사용된 Ollama 모델', max_length=100, null=True)),
                ('outputs', models.JSONField(blank=True, default=dict, help_text='LLM 원본 출력 결과', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervention_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI 중재 결과 기록',
                'verbose_name_plural': 'AI 중재 결과 기록들',
                'ordering': ['-target_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='MedicationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication_name', models.CharField(help_text='약 이름', max_length=100)),
                ('has_breakfast', models.BooleanField(default=False, help_text='아침 복용 스케줄')),
                ('has_lunch', models.BooleanField(default=False, help_text='점심 복용 스케줄')),
                ('has_dinner', models.BooleanField(default=False, help_text='저녁 복용 스케줄')),
                ('has_as_needed', models.BooleanField(default=False, help_text='필요 시 복용 스케줄')),
                ('taken_breakfast', models.BooleanField(default=False, help_text='아침 복용 여부')),
                ('taken_lunch', models.BooleanField(default=False, help_text='점심 복용 여부')),
                ('taken_dinner', models.BooleanField(default=False, help_text='저녁 복용 여부')),
                ('taken_as_needed', models.BooleanField(default=False, help_text='필요 시 복용 여부')),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '복용약 기록',
                'verbose_name_plural': '복용약 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'medication_name', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='PSSStressRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_1', models.IntegerField(blank=True, help_text='1번: 예상치 못한 일로 속상함', null=True)),
                ('question_2', models.IntegerField(blank=True, help_text='2번: 중요한 일을 조절할 수 없다고 느낌', null=True)),
                ('question_3', models.IntegerField(blank=True, help_text='3번: 불안하고 스트레스받음', null=True)),
                ('question_4', models.IntegerField(blank=True, help_text='4번: 개인적인 문제를 잘 처리할 수 있다고 자신감', null=True)),
                ('question_5', models.IntegerField(blank=True, help_text='5번: 일이 내 뜻대로 진행되고 있다고 느낌', null=True)),
                ('question_6', models.IntegerField(blank=True, help_text='6번: 자신이 해야 할 모든 일에 잘 대처할 수 없음', null=True)),
                ('question_7', models.IntegerField(blank=True, help_text='7번: 일상에서 짜증나는 것을 잘 조절할 수 있음', null=True)),
                ('question_8', models.IntegerField(blank=True, help_text='8번: 자신이 일을 잘 해냈다고 느낌', null=True)),
                ('question_9', models.IntegerField(blank=True, help_text='9번: 자신의 능력으로는 어떻게 해 볼 수 없는 일 때문에 화남', null=True)),
                ('question_10', models.IntegerField(blank=True, help_text='10번: 어려운 일이 너무 많아져서 극복할 수 없다고 느낌', null=True)),
                ('total_score', models.IntegerField(blank=True, help_text='총점 (0-40)', null=True)),
                ('stress_level', models.CharField(blank=True, choices=[('low', '낮음'), ('moderate', '보통'), ('high', '높음')], help_text='스트레스 수준', max_length=20, null=True)),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pss_stress_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PSS 스트레스 기록',
                'verbose_name_plural': 'PSS 스트레스 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('google', 'Google'), ('apple', 'Apple'), ('facebook', 'Facebook'), ('kakao', 'Kakao'), ('naver', 'Naver')], max_length=20)),
                ('provider_id', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('provider', 'provider_id')},
            },
        ),
        migrations.CreateModel(
            name='UserExerciseRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_steps', models.IntegerField(help_text='목표 걸음 수')),
                ('current_steps', models.IntegerField(help_text='현재 걸음 수')),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '사용자 운동 기록',
                'verbose_name_plural': '사용자 운동 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='UserFoodRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_type', models.CharField(choices=[('breakfast', '아침'), ('lunch', '점심'), ('dinner', '저녁')], help_text='식사 타입', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='섭취량 (g)', max_digits=8)),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_records', to='ibsafe.food')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '사용자 음식 기록',
                'verbose_name_plural': '사용자 음식 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'food', 'meal_type', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='UserSleepRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sleep_minutes', models.IntegerField(help_text='수면 시간 (분 단위)')),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sleep_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '사용자 수면 기록',
                'verbose_name_plural': '사용자 수면 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
        migrations.CreateModel(
            name='UserWaterRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_intake', models.DecimalField(decimal_places=2, help_text='물 섭취량 (ml)', max_digits=8)),
                ('cup_count', models.IntegerField(help_text='컵 수')),
                ('record_date', models.DateField(help_text='기록 날짜')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='water_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '사용자 물 섭취량 기록',
                'verbose_name_plural': '사용자 물 섭취량 기록들',
                'ordering': ['-record_date', '-created_at'],
                'unique_together': {('user', 'record_date')},
            },
        ),
    ]
